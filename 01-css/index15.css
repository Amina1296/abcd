/*.box{
    width: 100px;
    height: 100px;
    background-color: aqua;
    position: relative;
    animation-name: amina;
    animation-duration: 2s;
    animation-delay: 3s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
}
@keyframes amina{
    0%{
        left:0px;    }
    25%{
        left: 200px;
    }
    50%{
        left: 400px;
    }
    75%{
        left:200px
    }
}
.bounce-ball1{
    position:relative;
    width: 100px;
    height: 100px;
    background-color: black;
    border-radius: 50%;
    left: 100px;
    top:0;
    animation-name: bounce1;
    animation-duration: 1s;
    animation-timing-function: ease-out;
    animation-iteration-count: infinite;

    animation-direction: alternate;
    animation: bounce1 1s ease-out infinite alternate;
}

 @keyframes bounce1{
    to{
        top:50px
    }
    from{
        top:300px
    }
 }
 .bounce-ball2{
    background-color: yellow;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    position: absolute;

    animation: bounce2 2s infinite ;
 }

 @keyframes bounce2 {
    from{
        bottom:0px;
        animation-timing-function: ease-out;
    }
    50%{
        bottom: 300px;
        animation-timing-function: ease-in;
    }
    to{
        bottom: 0px;
        animation-timing-function: ease-out;
    }*/

    /* from, ro{
    bottom:0px;
    animation-timing-function: ease-out;
    } */

.ball{
    width: 100px;
    height: 100px;
    background: linear-gradient(yellow, orange);
    border-radius: 50%;
    animation: ball 5s linear 1 ;
    position: relative;
    
} 
@keyframes ball{
    from{
        left: 0px;
    }
    25%{
        left:300px;
        top:0px;
    }
    50%{
        top:300px;
        left:300px
    }
    75%{
        top:300px;
        left:0px;
    }
    to{
        left:0px;
        top:0px;
    }
    
    }
   


    teach
    /* 
    * 반응형 웹
    - 다양한 기기와 화면 크기에 적응하여 웹 페이지의 레이아웃이 유동적으로 변하는 웹 디자인 방식.
    - 사용자 경험(UX)을 최적화 하는 것과 다양한 기기에서 일관된 사용성을 제공하는 것이 주요 목표.

    * 적응형 웹
    - 사전에 정의된 여러 "고정된 레이아웃"을 사용하여 다양한 화면 크기에 맞추는 방식
    - 각기 다른 디바이스에 대해 특정 레이아웃을 준비 해두고, 사용자의 기기 화면 크기에 맞춰 적합한 레이아웃을 적용.
*/

.header {
    background-color: blanchedalmond;
}

.main {
    background-color: lightseagreen;
    display: flex;
}

.section {
    background-color: rgb(244, 253, 69);
    width: 80%;
}

.aside {
    background-color: hotpink;
    width: 20%;
}

.footer {
    background-color: chartreuse;
}

@media (max-width: 480px) {
    /* Viewport width가 480px 이하 일 때 */
    .header {
        height: 50px;
    }

    .main {
        flex-direction: column-reverse;
    }

    .aside {
        width: 100%;
        height: 50px;
    }

    .section {
        width: 100%;
        height: 50px;
    }

    .footer {
        height: 50px;
    }
}

@media screen and (min-width: 481px) and (max-width: 768px) {
    /* 화면 너비가 481px 이상 ~ 768px 이하 */
    .header {
        height: 150px;
    }

    .main {
        flex-direction: column;
    }

    .aside {
        display: none;
    }
}

/* 가로 모드 */
@media screen and (orientation: landscape) {
    body {
        background-color: lightgreen;
    }
}

/* 세로 모드 */
@media screen and (orientation: portrait) {
    body {
        background-color: lightpink;
    }
}
